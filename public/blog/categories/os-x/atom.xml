<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS X | Everything is Gray]]></title>
  <link href="http://everythingisgray.herokuapp.com/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://everythingisgray.herokuapp.com/"/>
  <updated>2013-05-22T22:43:26-07:00</updated>
  <id>http://everythingisgray.herokuapp.com/</id>
  <author>
    <name><![CDATA[James Barclay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatically Post Images to Tumblr Using Automator]]></title>
    <link href="http://everythingisgray.herokuapp.com/blog/2010/08/18/how-i-use-automator-to-post-images-to-tumblr/"/>
    <updated>2010-08-18T21:14:33-07:00</updated>
    <id>http://everythingisgray.herokuapp.com/blog/2010/08/18/how-i-use-automator-to-post-images-to-tumblr</id>
    <content type="html"><![CDATA[<p>For the past few months I have been drawing everyday on 2.5 x 3.5 inch pieces of Bristol board as part of my most recent &lsquo;<a href="http://koobtra.com/">kooBtrA</a>&rsquo; project. kooBtrA = ArtBook in reverse, as I plan to self publish a full-color book containing all the images sometime after one year passes.</p>

<p>As you might imagine, finding the time to draw every day can be challenging. Not to mention the fact that I&rsquo;ve also been posting these images to my Tumbleog; which includes scanning, resizing, and logging into Tumblr to post the image along with a description and tag. This became mundane after the first few days of posting, so I decided to set time aside to automate this process, as doing so would surely save me time in the long run.</p>

<p>I did a bit of research and discovered that Tumblr offers the ability to send posts via email. This immediately gave me the idea of using <a href="http://en.wikipedia.org/wiki/Automator_(software">Automator</a>) to streamline this process, as Automator offers a very straightforward &lsquo;New Mail Message&rsquo; Action. This would allow me to create an Image Capture Plugin that grabs the image that was scanned and include it in the email message, right? Well, yes, but with one caveat. With Snow Leopard&rsquo;s introduction came a few changes, one of which removes the ability to scan to a specified folder while using an Image Capture Plugin, (the image is saved to the ~/Pictures folder, then the Workflow runs). The workaround in my case was to use a Folder Action, which would result in the Workflow running any time a new file is added to the specified folder.</p>

<p>What I had been doing until this point was scanning the image to a subfolder of my ~/Documents folder; scaling the image to 300px max on either side depending on orientation; then uploading the image to Tumblr.com along with a description and tag. The Folder Action Workflow I ended up producing cuts the time this took in half.</p>

<p>The first thing I did was create two variables. One for the name of the post and one for the number of the post. You can achieve this by right or control clicking in the variables window at the bottom of the application window and choosing &lsquo;New variable.&rsquo; I left the value blank, as this will vary with each post. The next step was to start dragging actions over to the right of the application window. The first is an &lsquo;Ask for Text&rsquo; Action, which asks for the name of the post, then sets the value of the variable. The same goes for the number of post. The Workflow then asks for the Finder items to act on, then copies them to a new location and scales them to 300px. Finally, the &lsquo;New Mail Message&rsquo; Action is added, which utilizes the name and number variables that were set previously, as well as receives the resized image from the previous Action. The last Action that was added was &lsquo;Send Outgoing Messages,&rsquo; which is fairly self explanatory.</p>

<p>Below is the printed Workflow for your reference should you wish to accomplish something similar. If you have any suggestions as to improving this Automator Workflow please leave a comment. For more information regarding Tumblr&rsquo;s post via email option please visit <a href="http://www.tumblr.com/docs/en/email_publishing">http://www.tumblr.com/docs/en/email_publishing</a>.</p>

<p><a href="http://a.imageshack.us/img441/5205/posttokoobtra.jpg"><img src="http://a.imageshack.us/img718/5205/posttokoobtra.jpg" alt="Post to Tumblr" /> </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Archive Utility in Mac OS X]]></title>
    <link href="http://everythingisgray.herokuapp.com/blog/2010/02/15/configure-archive-utility-in-mac-os-x/"/>
    <updated>2010-02-15T20:46:41-08:00</updated>
    <id>http://everythingisgray.herokuapp.com/blog/2010/02/15/configure-archive-utility-in-mac-os-x</id>
    <content type="html"><![CDATA[<p>Having recently purchased a new MacBook Pro and electing to skip the option of running <a href="http://en.wikipedia.org/wiki/Migration_Assistant_(Apple">Migration Assistant</a>) to transfer my data and settings, I noticed that a few applications were behaving differently. Over the years I&rsquo;ve configured quite a few things on my Mac, and eventually I became accustomed to said customizations. One of the first things I noticed was that when I would unarchive a zip file, the compressed file would stay put. I remembered that a few years ago I learned of a cool way to configure Mac OS X&rsquo;s built-in Archive Utility, (using a System Preference pane), so I immediately went digging. To do this, simply navigate toÂ <code>therootofyourharddrive/System/Library/CoreServices</code>. From there right or control click on Archive Utility.app, and select &ldquo;Show Package Contents.&rdquo; A new window will open containing a folder named <code>Contents</code>, within which you&rsquo;ll find <code>Resources</code>, and finally <code>Archives.prefPane</code>. Opening this preference pane will result in System Preferences.app asking if you&rsquo;d like to install for all users or for this user only. Voila! Now you can tell Archive Utility to delete the archive after expanding it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check if your Mac is 64 bit]]></title>
    <link href="http://everythingisgray.herokuapp.com/blog/2009/10/08/check-if-your-mac-is-64-bit/"/>
    <updated>2009-10-08T12:52:41-07:00</updated>
    <id>http://everythingisgray.herokuapp.com/blog/2009/10/08/check-if-your-mac-is-64-bit</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s an easy way to determine whether or not your Mac is 64 bit capable. Open <code>Terminal.app</code>, which is located in <code>/Applications/Utilities</code> and type in</p>

<p><code>sysctl hw |grep 64bit</code>.</p>

<p>If your machine is 64 bit capable, the result will be</p>

<p><code>hw.cpu64bit_capable: 1</code></p>

<p>If your machine is not 64 bit capable, the result will be</p>

<p><code>hw.cpu64bit_capable: 0</code></p>

<p>Tip source: <a href="http://osxdaily.com/2009/09/23/check-if-your-mac-is-64-bit-compatible-via-command-line/">OSXDaily.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snow Stack 3D CSS]]></title>
    <link href="http://everythingisgray.herokuapp.com/blog/2009/07/22/snow-stack-3d-css/"/>
    <updated>2009-07-22T18:36:30-07:00</updated>
    <id>http://everythingisgray.herokuapp.com/blog/2009/07/22/snow-stack-3d-css</id>
    <content type="html"><![CDATA[<p>A gentleman by the name of Charles Ying of <a href="http://www.satine.org/">Satine.org</a> has developed a new 3D CSS visual effects demonstration called <a href="http://www.satine.org/archives/2009/07/11/snow-stack-is-here/">Snow Stack</a>, which runs entirely on JavaScript, native WebKit CSS extensions, and XHTML/HTML. If you&rsquo;re familiar with Cover Flow/Core Animation on the Mac you&rsquo;ll immediately recognize Snow Stack. In order to run the demo you&rsquo;ll need either the <em>Snow Leopard Beta + Safari</em> <strong>or</strong> <em>Leopard + the latest nightly build of WebKit</em>. Either way, it&rsquo;s quite fascinating to think that this is all being done in the browser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cappuccino Web Framework]]></title>
    <link href="http://everythingisgray.herokuapp.com/blog/2009/07/20/cappuccino-web-framework/"/>
    <updated>2009-07-20T19:31:43-07:00</updated>
    <id>http://everythingisgray.herokuapp.com/blog/2009/07/20/cappuccino-web-framework</id>
    <content type="html"><![CDATA[<p>So lately I&rsquo;ve been playing around with the <a href="http://cappuccino.org/">Cappuccino web framework</a> and a nifty little programming language called Objective-J. The Cappuccino framework allows you to create desktop class applications for the browser, and gives you the ability to run these applications on the desktop, (similar to <a href="http://www.adobe.com/products/air/">Adobe AIR</a>). One of the many benefits of being able to create applications that run on the desktop is having the ability to run the application while offline.</p>

<p>The interesting thing about Objective-J is that it is based on Objective-C, but any valid JavaScript code is accepted as valid Objective-J code. A fun way to look at it is that Objective-J is to JavaScript as Objective-C is to C.</p>

<p>Cappuccino is frequently compared to another JavaScript framework called <a href="http://www.sproutcore.com/">SproutCore</a>, which also allows you to build rich Mac-like applications for the browser, (just look at <a href="http://me.com/">MobileMe</a>). Both Cappuccino and SproutCore utilize the same icon set and window chrome as desktop Mac applications, which can look incredible.</p>

<p>If you&rsquo;d like to see Cappuccino and Objective-J in action, take a look at <a href="http://280slides.com/">280 Slides</a>, and if you&rsquo;d like to learn more, read the <a href="http://cappuccino.org/learn/tutorials/">tutorials</a> on Cappuccino.org and <a href="http://cappuccino.org/starter">download the sample application</a>.</p>

<p>@end</p>
]]></content>
  </entry>
  
</feed>
